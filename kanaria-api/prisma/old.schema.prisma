generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String
  role      Role
  email     String    @unique
  password  String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  forms     Form[]
}

model Form {
  id          String         @id @default(uuid())
  title       String
  description String?
  isActive    Boolean        @default(true)
  beginDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdBy   String
  fields      Field[]        @relation("FormFields")
  creator     User           @relation(fields: [createdBy], references: [id])
  responses   FormResponse[] @relation("FormResponses")

  @@index([isActive])
  @@index([createdBy], map: "Form_createdBy_fkey")
}

model Field {
  id          String          @id @default(uuid())
  formId      String
  title       String
  description String?
  type        FieldType
  maxLength   Int?
  minLength   Int?
  options     Json
  isRequired  Boolean         @default(false)
  order       Int
  errorMessage String?
  form        Form            @relation("FormFields", fields: [formId], references: [id])
  responses   FieldResponse[]

  @@index([formId])
}

model FormResponse {
  id        String          @id @default(uuid())
  formId    String
  email     String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  status    Status          @default(UNREAD)
  responses FieldResponse[]
  form      Form            @relation("FormResponses", fields: [formId], references: [id])

  @@index([formId])
}

model FieldResponse {
  id             String       @id @default(uuid())
  formResponseId String
  fieldId        String
  value          String       @db.Text
  field          Field        @relation(fields: [fieldId], references: [id])
  formResponse   FormResponse @relation(fields: [formResponseId], references: [id])

  @@index([formResponseId])
  @@index([fieldId])
}

model ShopCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String        @db.Text
  price       Float
  categoryId  String
  category    ShopCategory  @relation(fields: [categoryId], references: [id])
  isActive    Boolean       @default(true)
  stock       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  images      ProductImage[]

  @@index([categoryId])
}

model ProductImage {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl    String
  isPrimary   Boolean   @default(false)
  altText     String?
  displayOrder Int      @default(0)
  createdAt   DateTime  @default(now())

  @@index([productId])
}

enum FieldType {
  TEXT
  EMAIL
  PHONE
  DATE
  NUMBER
  TEXTAREA
  CHECKBOX
  RADIO
}

enum Status {
  READ
  UNREAD
}

enum Role {
  ADMIN
  SUPER_ADMIN
}